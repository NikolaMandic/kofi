#!/usr/bin/env perl6
use v6;

grammar X {

  token url { \w+\:\/\/<-[\n]>+  }
  token file { <-[:\n]>+ }
  token traitsource { <file> | <url> }
  token traitname { \w+ }
  token ws { <!ww> \h* }
  token separator { <ws> }
  rule trait { <traitname><separator><traitsource> \n }
  rule TOP  { \s*<trait>+ }
}
sub slurponline($url){

  use Net::HTTP::GET;
  my %header   = :Connection<keep-alive>;
  my $response = Net::HTTP::GET("$url", :%header);
  $response.content;
}
class A {
  has $.file is rw;
  has $.temp is rw;
  method url($url){
    $!temp =  slurponline($url);
  }
  method file($path){
    $!temp=($path.IO.slurp);
  }
  method traitsource($traitsource) {
    spurt($!file, $!temp, :append);
  }
  method traitname($traitname) {
      say "word $traitname";

  }
};


my $source= shift @*ARGS;
my $destination = shift @*ARGS;
spurt $destination, "";
my $a = A.new(file => $destination);

try X.parse($source.IO.slurp, :actions($a));

if $! {
    say "Parse failed: ", $!.message;
}
elsif $/ {
    say $();
}
else {
    say "Parse failed.";
}
